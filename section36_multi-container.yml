apiVersion: v1
kind: Pod
metadata:
  name: two-containers
spec:
  restartPolicy: OnFailure
  containers:
    - name: nginx-container
      image: nginx
      volumeMounts:
        - name: shared-data
          mountPath: /usr/share/nginx/html  # path of the container nginx
    - name: debian-container
      image: debian
      volumeMounts:
        - name: shared-data
          mountPath: /pod-data
      command: ["/bin/sh"]
      args: ["-c", "echo Hello from the Secondary container > /pod-data/index.html"]
  volumes:
    - name: shared-data
      emptyDir: {}

# MultiContainers:
#Multi Container Pods
#1) Kubernetes Pods can have Single or Multiple Containers.
#2) In Multi Container Pods, containers share the resources like network and storage, also can communicate on Local Host.
#3) Note: Best Practice is to keep the containers in separate Pods, until we would like containers will share the resources.

#Cross Container Comm.
#1) Container sharing a Pod, can interact with Shared resources.
#2) Network : Containers share the same Network and communicate on any Port, unless the port is exposed to cluster.
#3) Storage : Containers Can use shared Volume to share the data in a Pod.

# steps
# execute on singlenode

# 1) Go to directory where scripts are stored, cd <diretory_name>
# 2) Go to vi editor and name it using multicontainers.yaml
# 3) copy the content from above and save the file.
# 4) create a pod, kubectl apply -f <file-name.yml>
# 5) check if pod is created, kubectl get pods
# 6) check describe of pod, kubectl desribe pod <pod-name>
# 7) 